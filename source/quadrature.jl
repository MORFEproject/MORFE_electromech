

function quadrature_points(::Val{:TRI3gp})

P1 = 1/6
P2 = 4/6
weights = [P1, P1, P1]
points = [[P2, P1, P1],[P1, P2, P1],[P1, P1, P2]]
return zip(weights, points)

end


function quadrature_points(::Val{:TRI6gp})

a1=0.445948490915965
a2=0.091576213509771
points=[[a1, a1, 1-2*a1], 
        [a1, 1-2*a1, a1], 
        [1-2*a1, a1, a1],
        [a2, a2, 1-2*a2], 
        [a2, 1-2*a2, a2], 
        [1-2*a2, a2, a2]];

w1=0.111690794839005                   
w2=0.054975871827661
weights=[w1, w1, w1, w2, w2, w2] 

return zip(weights, points)

end


function quadrature_points(::Val{:LINE2gp})

points=[-1/sqrt(3), 1/sqrt(3)]    
weights=[1, 1]

return zip(weights, points)
end


function quadrature_points(::Val{:LINE3gp})

points=[-0.7745966692414834,  0.0,  0.7745966692414834]
weights=[0.5555555555555556, 0.8888888888888888, 0.5555555555555556]

return zip(weights, points)
end


function quadrature_points(::Val{:LINE4gp})

points=[-0.8611363115940526, -0.3399810435848563, 0.3399810435848563, 0.8611363115940526]
weights=[0.34785484513745385, 0.6521451548625462, 0.6521451548625462, 0.34785484513745385]

return zip(weights, points)
end


function quadrature_points(::Val{:LINE5gp})

points=[-0.906179845938664, -0.5384693101056831, 0.0, 0.5384693101056831, 0.906179845938664]
weights=[0.23692688505618908, 0.47862867049936647, 0.5688888888888889, 0.47862867049936647, 0.23692688505618908]

return zip(weights, points)
end



#=
const GLB = [
[(0.0,),
(2.0,)],
[(-0.5773502691896258, 0.5773502691896258,),
(1.0, 1.0,)],
[(-0.7745966692414834, 0.0, 0.7745966692414834,),
(0.5555555555555556, 0.8888888888888888, 0.5555555555555556,)],
[(-0.8611363115940526, -0.3399810435848563, 0.3399810435848563, 0.8611363115940526,),
(0.34785484513745385, 0.6521451548625462, 0.6521451548625462, 0.34785484513745385,)],
[(-0.906179845938664, -0.5384693101056831, 0.0, 0.5384693101056831, 0.906179845938664,),
(0.23692688505618908, 0.47862867049936647, 0.5688888888888889, 0.47862867049936647, 0.23692688505618908,)],
]
=#